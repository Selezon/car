// Generated by CoffeeScript 1.8.0

/**
SettingsController

@description :: Server-side logic for managing settings
@help        :: See http://links.sailsjs.org/docs/controllers
 */

(function() {
  var unique;

  unique = function(arr) {
    var i, k, obj, objs, str;
    obj = {};
    objs = [];
    k = 0;
    i = 0;
    while (i < arr.length) {
      str = arr[i].name;
      if (obj[str] == null) {
        objs[k] = arr[i];
        k++;
      }
      obj[str] = true;
      i++;
    }
    return objs;
  };

  module.exports = {
    index: function(req, res) {
      var kpp;
      res.locals.styles = ["vendor/slider/css/slider.css", "vendor/chosen/chosen.min.css", "vendor/datetimepicker/css/bootstrap-datetimepicker.min.css", "vendor/codemirror/lib/codemirror.css", "vendor/tagsinput/bootstrap-tagsinput.css", "vendor/selectize/selectize.bootstrap3.css", "/cdnjs.cloudflare.com/ajax/libs/jquery.bootstrapvalidator/0.5.2/css/bootstrapValidator.min.css", "styles/style.css"];
      res.locals.scripts = ["vendor/formwizard/js/bwizard.min.js", "vendor/codemirror/lib/codemirror.js", "vendor/codemirror/addon/mode/overlay.js", "vendor/codemirror/mode/markdown/markdown.js", "vendor/codemirror/mode/xml/xml.js", "vendor/codemirror/mode/gfm/gfm.js", "vendor/marked/marked.js", "vendor/parsley/parsley.min.js", "vendor/moment/min/moment-with-langs.min.js", "vendor/datetimepicker/js/bootstrap-datetimepicker.min.js", "vendor/tagsinput/bootstrap-tagsinput.min.js", "vendor/inputmask/jquery.inputmask.bundle.min.js", "vendor/validation/jquery.validate.js", "vendor/selectize/selectize.js", "/cdnjs.cloudflare.com/ajax/libs/jquery.bootstrapvalidator/0.5.2/js/bootstrapValidator.min.js", "controlScript/settingsIndex.js"];
      kpp = {
        'Manual': req.__('Manual'),
        'Automatic': req.__('Automatic'),
        '4-speed manual': req.__('4-speed manual'),
        '6-speed manual': req.__('6-speed manual'),
        '6-speed automatic': req.__('6-speed automatic'),
        '5-speed manual': req.__('5-speed manual'),
        'Single Speed': req.__('Single Speed'),
        'CVT': req.__('CVT'),
        '7-speed automatic': req.__('7-speed automatic'),
        '5-speed shiftable automatic': req.__('5-speed shiftable automatic'),
        '6-speed automated manual': req.__('6-speed automated manual'),
        '5-speed automated manual': req.__('5-speed automated manual'),
        '8-speed shiftable automatic': req.__('8-speed shiftable automatic'),
        '5-speed automatic': req.__('5-speed automatic'),
        '4-speed automatic': req.__('4-speed automatic'),
        '6-speed shiftable automatic': req.__('6-speed shiftable automatic'),
        '7-speed shiftable automatic': req.__('7-speed shiftable automatic'),
        '7-speed automated manual': req.__('7-speed automated manual'),
        '8-speed automated manual': req.__('8-speed automated manual'),
        '8-speed automatic': req.__('8-speed automatic'),
        '4-speed shiftable automatic': req.__('4-speed shiftable automatic'),
        '7-speed manual': req.__('7-speed manual'),
        'Automated Manual': req.__('Automated Manual'),
        'Direct Drive': req.__('Direct Drive')
      };
      req.setLocale('ua');
      res.view("settings/index");
    },
    getVin: function(req, res) {
      var code;
      code = req.query.vin;
      Car.getInfoVin(code, function(result) {
        res.json(result);
      });
    },
    getMakes: function(req, res) {
      AutoMake.find().sort("name").exec(function(err, result) {
        return res.json(result);
      });
    },
    getModels: function(req, res) {
      var condition;
      condition = {};
      async.waterfall([
        function(callback) {
          if (req.params.make != null) {
            return callback(null, req.params.make);
          } else {
            return callback(null, null);
          }
        }, function(make, callback) {
          if (req.params.year != null) {
            return AutoYear.findOneByYear(req.params.year).exec(function(err, year) {
              callback(null, make, year);
            });
          } else {
            return callback(null, make, null);
          }
        }
      ], function(err, make, year) {
        if (make != null) {
          condition["id_make"] = make;
        }
        if (year != null) {
          condition["idYear"] = year.id;
        }
        AutoModel.find(condition).sort("name").exec(function(err, resul) {
          res.json(unique(resul));
        });
      });
    },
    getInfoModels: function(req, res) {
      var id, type, year, _req;
      _req = req;
      id = req.params.id;
      year = req.params.year;
      type = req.params.type;
      if (type === "id") {
        async.waterfall([
          function(callback) {
            if (req.params.year != null) {
              AutoYear.findOneByYear(req.params.year).exec(function(err, year) {
                callback(null, year);
              });
            } else {
              callback(null, null);
            }
          }
        ], function(err, year) {
          if (year == null) {
            res.json({});
          } else {
            AutoParam.find({
              model_id: id,
              model_year: year.id
            }).populate("model_make_id").exec(function(err, resul) {
              var index, ret, trim;
              _req.setLocale('ua');
              ret = (function() {
                var _results;
                _results = [];
                for (index in resul) {
                  trim = resul[index];
                  _results.push({
                    id: trim.id,
                    model_trim: trim.model_trim,
                    model_transmission_type: trim.model_transmission_type != null ? _req.__(trim.model_transmission_type) : void 0,
                    model_body: trim.model_body,
                    region: trim.region,
                    country: trim.model_make_id.country,
                    model_drive: trim.model_drive,
                    model_engine_type: trim.model_engine_type,
                    model_engine_position: trim.model_engine_position,
                    model_engine_cyl: trim.model_engine_cyl,
                    model_engine_cc: trim.model_engine_cc,
                    model_engine_ci: trim.model_engine_ci,
                    model_engine_valves_per_cyl: trim.model_engine_valves_per_cyl,
                    model_engine_torque_rpm: trim.model_engine_torque_rpm,
                    model_engine_fuel: trim.model_engine_fuel,
                    model_lkm_hwy: trim.model_lkm_hwy,
                    model_lkm_city: trim.model_lkm_city,
                    model_fuel_cap_l: trim.model_fuel_cap_l,
                    model_length_mm: trim.model_length_mm,
                    model_width_mm: trim.model_width_mm,
                    model_height_mm: trim.model_height_mm,
                    model_weight_kg: trim.model_weight_kg
                  });
                }
                return _results;
              })();
              res.json(ret);
            });
          }
        });
      }
    },
    getParam: function(req, res) {
      var transmission;
      transmission = staticVariable.model_transmission_type;
      return console.log(transmission);
    }
  };

}).call(this);
