// Generated by CoffeeScript 1.8.0

/**
Created by Ihor on 27.09.2014.
 */

(function() {
  exports.getInfoVin = function(code, myCallback) {
    console.log(code);
    async.waterfall([
      function(callback) {
        return AutoVin.findOneByCode(code, function(err, res) {
          if ((res == null) || (res.idYear == null)) {
            callback();
          } else {
            console.log(res);
            myCallback({
              year: res.idYear,
              make: res.idMake,
              model: res.idModel
            });
          }
        });
      }, function(callback) {
        var vin;
        vin = require("vin");
        return vin.lookup(code, function(vehicle) {
          console.log("decodethis", vehicle);
          if (vehicle.model != null) {
            myCallback({
              year: vehicle.year,
              make: vehicle.make,
              model: vehicle.model
            });
          } else {
            callback();
          }
        });
      }, function(callback) {
        var EdmundsClient, client;
        EdmundsClient = require("node-edmunds-api");
        client = new EdmundsClient({
          apiKey: "zsx3jzwjkk9ke7zq4ze9mjp3"
        });
        return client.decodeVin({
          vin: code
        }, function(err, res) {
          console.log("developer", res);
          if ((res != null) && (res.status != null) && res.status !== "NOT_FOUND") {
            myCallback({
              year: res.years[0].year,
              make: res.make.name,
              model: res.model.name
            });
          } else {
            callback();
          }
        });
      }
    ], function() {
      return myCallback({
        year: null,
        make: null,
        model: null
      });
    });
  };

  exports.insertParamCar = function(options) {
    var dir, fs, ii;
    ii = parseInt(options.y);
    fs = require("fs");
    dir = "autoTrim/" + ii + ".txt";
    fs.readFile(dir, "utf8", function(err, data) {
      var model;
      if (err) {
        return console.log(err);
      }
      data = data.substr(0, data.length - 1);
      model = JSON.parse("[" + data + "]");
      model.forEach(function(val, i) {
        async.waterfall([
          function(callback) {
            return AutoYear.findOneByYear(ii, callback);
          }, function(year, callback) {
            return AutoMake.findOneByMake_uid(val.model_make_id, function(err, res) {
              callback(null, year, res);
            });
          }, function(year, make, callback) {
            if (make == null) {
              return;
            }
            return AutoModel.findOne({
              id_make: make.id,
              name: val.model_name,
              idYear: year.id
            }, function(err, model_car) {
              callback(null, year, model_car);
            });
          }
        ], function(err, year, model_car) {
          var model2;
          model2 = val;
          console.log(year, model_car);
          if (model_car == null) {
            return;
          }
          val.model_id_url = val.model_id;
          val.model_year = year.id;
          val.model_make_id = model_car.id_make;
          val.model_id = model_car.id;
          AutoParam.create(val, console.log);
        });
      });
    });
    res.send("vinGet");
  };

  exports.insertModelsCar = function(options) {
    var g_i, request;
    g_i = parseInt(options.y);
    request = require("request");
    request("http://my-way.bl.ee/" + g_i + ".txt", function(error, response, request) {
      var model;
      model = JSON.parse("[" + request + "{}]");
      console.log(g_i);
      AutoYear.findOneByYear(g_i, function(i, y) {
        model.forEach(function(v, i) {
          if (v.model_make_id != null) {
            AutoMake.findOneByMake_uid(v.model_make_id, function(data, t) {
              var userCreated;
              AutoModel.find().where({
                name: v.model_name,
                idYear: y.id
              }).limit(1).exec(userCreated = function(err, car) {
                var afterwards;
                if ((car != null) && car.length > 0) {
                  AutoModel.update(car.id, {
                    name: v.model_name,
                    id_make: t.id,
                    idYear: y.id,
                    certified: 1
                  }, afterwards = function(err, updated) {
                    console.log("updated: ", updated);
                  });
                } else {
                  AutoModel.create({
                    name: v.model_name,
                    id_make: t.id,
                    idYear: y.id,
                    certified: 1
                  }, function(error, response) {});
                }
              });
            });
          }
        });
      });
    });
    return res.send("<a href='/get/vin?y=" + (g_i + 1) + "'>" + (g_i + 1) + "</a>");
  };

}).call(this);
